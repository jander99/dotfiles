#!/bin/sh
## CloudFoundry aliases and functions

if command -v cf >/dev/null 2>&1; then

    TMP=/tmp
    CFH=/.cf

    CFTRACE=$TMP/cf-trace.log

    # Reset CF_HOME
    if [ -d $TMP$CFH ]; then
        rm -rf $TMP$CFH
    fi

    #Envs
    declare -A cffounds
    cffounds[np]=https://api.run-np.homedepot.com
    cffounds[za]=https://api.run-za.homedepot.com
    cffounds[zb]=https://api.run-zb.homedepot.com
    cffounds[eb]=https://api.run-eb.homedepot.com

    # Logs in to a CF Foundation defined in the $cffounds hash
    function cfl() {
        if [ -n "$1" ]; then
            if [ -n "$LDAP_PASS" ]; then
                cf login -a $cffounds[$1] -u "$USER" -p "$LDAP_PASS"
            else
                cf login -a $cffounds[$1] -u "$USER"
            fi
        else
            if [ -n "$LDAP_PASS" ]; then
                cf login -u "$USER" -p "$LDAP_PASS"
            else
                cf login -u "$USER"
            fi
        fi
    }

    # Establishes a temporary non-home directory for CF creds
    # Used in case someone else needs to auth to a CF foundation
    # Clears if this file is sourced again.
    function cftemp() {
        echo "Setting Temporary CF credentials. "
        if [ -d $TMP$CFH ]; then
            rm -rf $TMP$CFH
        fi
        export CF_HOME=$TMP
    }

    # Enables
    function cftrace() {
        if [ -z "$1" ]; then
            unset CF_TRACE
            echo "CF Trance Disabled. Log intact"
        else
            if [ $1 = "enable" ]; then
                export CF_TRACE=$CFTRACE
                echo "CF Trace Enabled, logging to ${CFTRACE}"
            fi
        fi
    }

    # copies PCF env to local env!
    function cf-copy-env() {
        [[ -z "$1" ]] && return 1
        APP_GUID=$(cf app "${1}" --guid) || return 1
        JSON_ENV="$(cf curl /v2/apps/${APP_GUID}/env)"
        export VCAP_SERVICES="$(jq '.system_env_json.VCAP_SERVICES' <<<" ${JSON_ENV}")"
        export VCAP_APPLICATION="$(jq '.application_env_json.VCAP_APPLICATION' <<<"${JSON_ENV}")"
        eval "$(
            jq -r '.environment_json as $env
        | $env
        | keys
        | map("export \(.)=" + ($env[.] | @json))
        | .[]' <<<"${JSON_ENV}"
        )"
        # Unset the proxies, please
        for e in $(env | egrep -i "^http" | awk -F "=" '{print $1}'); do
            unset $e
        done
    }

    # This could be rewritten a little.
    function cf-get-info() {
        # get cloudfoundry info
        if [[ -f ~/.cf/config.json ]]; then
            cf_foundation=$(grep ".Target" ~/.cf/config.json | sed -E 's/.*api.*run[.-]?(.*)\.homedepot\.com.*/\1/')
            if [[ -n "$cf_foundation" ]]; then
                # if we have the jq bin, grab the org and space info, if we're logged in to cf
                local jq_bin=$(command -v jq 2>/dev/null)
                if [[ -n "$jq_bin" ]]; then
                    local cf_org=$("${jq_bin}" -r .OrganizationFields.Name ~/.cf/config.json 2>/dev/null)
                    local cf_space=$("${jq_bin}" -r .SpaceFields.Name ~/.cf/config.json 2>/dev/null)
                fi
                if [[ -n "$cf_org" && -n "$cf_space" ]]; then
                    local cf_foundation_string="${cf_foundation}/${cf_org}/${cf_space}"
                else
                    local cf_foundation_string="${cf_foundation}"
                fi
                [[ $cf_foundation == at ]] && echo -n "☁️  ${cf_foundation_string}"                # sandbox
                [[ $cf_foundation =~ np ]] && echo -n "☁️  ${cf_foundation_string}"                # non-prod
                [[ $cf_foundation =~ .*z[a-z].* ]] && echo -n "☁️  ⚠️  ${cf_foundation_string} ⚠️" # production
            fi
        fi
    }

    function cf6() {
        brew unlink cf-cli@6 && brew unlink cf-cli@7 && brew unlink cf-cli@8 && brew link cf-cli@6
    }

    function cf7() {
        brew unlink cf-cli@6 && brew unlink cf-cli@7 && brew unlink cf-cli@8 && brew link cf-cli@7
    }

    function cf8() {
        brew unlink cf-cli@6 && brew unlink cf-cli@7 && brew unlink cf-cli@8 && brew link cf-cli@8
    }

fi
